// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	JWTScopes = "JWT.Scopes"
)

// PostTelemetryInstanceLogJSONRequestBody defines body for PostTelemetryInstanceLog for application/json ContentType.
type PostTelemetryInstanceLogJSONRequestBody = Log

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /config/{instance})
	GetConfigInstance(w http.ResponseWriter, r *http.Request, instance string)

	// (GET /telemetry/{instance}/log)
	GetTelemetryInstanceLog(w http.ResponseWriter, r *http.Request, instance string)

	// (POST /telemetry/{instance}/log)
	PostTelemetryInstanceLog(w http.ResponseWriter, r *http.Request, instance string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (GET /config/{instance})
func (_ Unimplemented) GetConfigInstance(w http.ResponseWriter, r *http.Request, instance string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /telemetry/{instance}/log)
func (_ Unimplemented) GetTelemetryInstanceLog(w http.ResponseWriter, r *http.Request, instance string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /telemetry/{instance}/log)
func (_ Unimplemented) PostTelemetryInstanceLog(w http.ResponseWriter, r *http.Request, instance string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetConfigInstance operation middleware
func (siw *ServerInterfaceWrapper) GetConfigInstance(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "instance" -------------
	var instance string

	err = runtime.BindStyledParameterWithOptions("simple", "instance", chi.URLParam(r, "instance"), &instance, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "instance", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, JWTScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConfigInstance(w, r, instance)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTelemetryInstanceLog operation middleware
func (siw *ServerInterfaceWrapper) GetTelemetryInstanceLog(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "instance" -------------
	var instance string

	err = runtime.BindStyledParameterWithOptions("simple", "instance", chi.URLParam(r, "instance"), &instance, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "instance", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, JWTScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTelemetryInstanceLog(w, r, instance)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostTelemetryInstanceLog operation middleware
func (siw *ServerInterfaceWrapper) PostTelemetryInstanceLog(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "instance" -------------
	var instance string

	err = runtime.BindStyledParameterWithOptions("simple", "instance", chi.URLParam(r, "instance"), &instance, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "instance", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, JWTScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostTelemetryInstanceLog(w, r, instance)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/config/{instance}", wrapper.GetConfigInstance)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/telemetry/{instance}/log", wrapper.GetTelemetryInstanceLog)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/telemetry/{instance}/log", wrapper.PostTelemetryInstanceLog)
	})

	return r
}

type GetConfigInstanceRequestObject struct {
	Instance string `json:"instance"`
}

type GetConfigInstanceResponseObject interface {
	VisitGetConfigInstanceResponse(w http.ResponseWriter) error
}

type GetConfigInstance200JSONResponse Config

func (response GetConfigInstance200JSONResponse) VisitGetConfigInstanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConfigInstance400JSONResponse struct {
	Message *string `json:"message,omitempty" yaml:"message,omitempty"`
}

func (response GetConfigInstance400JSONResponse) VisitGetConfigInstanceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetConfigInstance404Response struct {
}

func (response GetConfigInstance404Response) VisitGetConfigInstanceResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetTelemetryInstanceLogRequestObject struct {
	Instance string `json:"instance"`
}

type GetTelemetryInstanceLogResponseObject interface {
	VisitGetTelemetryInstanceLogResponse(w http.ResponseWriter) error
}

type GetTelemetryInstanceLog200JSONResponse struct {
	Log *string `json:"log,omitempty" yaml:"log,omitempty"`
}

func (response GetTelemetryInstanceLog200JSONResponse) VisitGetTelemetryInstanceLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTelemetryInstanceLog400JSONResponse struct {
	Message *string `json:"message,omitempty" yaml:"message,omitempty"`
}

func (response GetTelemetryInstanceLog400JSONResponse) VisitGetTelemetryInstanceLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetTelemetryInstanceLog401JSONResponse struct {
	Message *string `json:"message,omitempty" yaml:"message,omitempty"`
}

func (response GetTelemetryInstanceLog401JSONResponse) VisitGetTelemetryInstanceLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetTelemetryInstanceLog403JSONResponse struct {
	Message *string `json:"message,omitempty" yaml:"message,omitempty"`
}

func (response GetTelemetryInstanceLog403JSONResponse) VisitGetTelemetryInstanceLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetTelemetryInstanceLog404Response struct {
}

func (response GetTelemetryInstanceLog404Response) VisitGetTelemetryInstanceLogResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostTelemetryInstanceLogRequestObject struct {
	Instance string `json:"instance"`
	Body     *PostTelemetryInstanceLogJSONRequestBody
}

type PostTelemetryInstanceLogResponseObject interface {
	VisitPostTelemetryInstanceLogResponse(w http.ResponseWriter) error
}

type PostTelemetryInstanceLog201Response struct {
}

func (response PostTelemetryInstanceLog201Response) VisitPostTelemetryInstanceLogResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type PostTelemetryInstanceLog400JSONResponse struct {
	Message *string `json:"message,omitempty" yaml:"message,omitempty"`
}

func (response PostTelemetryInstanceLog400JSONResponse) VisitPostTelemetryInstanceLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostTelemetryInstanceLog401JSONResponse struct {
	Message *string `json:"message,omitempty" yaml:"message,omitempty"`
}

func (response PostTelemetryInstanceLog401JSONResponse) VisitPostTelemetryInstanceLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostTelemetryInstanceLog403JSONResponse struct {
	Message *string `json:"message,omitempty" yaml:"message,omitempty"`
}

func (response PostTelemetryInstanceLog403JSONResponse) VisitPostTelemetryInstanceLogResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /config/{instance})
	GetConfigInstance(ctx context.Context, request GetConfigInstanceRequestObject) (GetConfigInstanceResponseObject, error)

	// (GET /telemetry/{instance}/log)
	GetTelemetryInstanceLog(ctx context.Context, request GetTelemetryInstanceLogRequestObject) (GetTelemetryInstanceLogResponseObject, error)

	// (POST /telemetry/{instance}/log)
	PostTelemetryInstanceLog(ctx context.Context, request PostTelemetryInstanceLogRequestObject) (PostTelemetryInstanceLogResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetConfigInstance operation middleware
func (sh *strictHandler) GetConfigInstance(w http.ResponseWriter, r *http.Request, instance string) {
	var request GetConfigInstanceRequestObject

	request.Instance = instance

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetConfigInstance(ctx, request.(GetConfigInstanceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConfigInstance")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetConfigInstanceResponseObject); ok {
		if err := validResponse.VisitGetConfigInstanceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTelemetryInstanceLog operation middleware
func (sh *strictHandler) GetTelemetryInstanceLog(w http.ResponseWriter, r *http.Request, instance string) {
	var request GetTelemetryInstanceLogRequestObject

	request.Instance = instance

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetTelemetryInstanceLog(ctx, request.(GetTelemetryInstanceLogRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTelemetryInstanceLog")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTelemetryInstanceLogResponseObject); ok {
		if err := validResponse.VisitGetTelemetryInstanceLogResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostTelemetryInstanceLog operation middleware
func (sh *strictHandler) PostTelemetryInstanceLog(w http.ResponseWriter, r *http.Request, instance string) {
	var request PostTelemetryInstanceLogRequestObject

	request.Instance = instance

	var body PostTelemetryInstanceLogJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostTelemetryInstanceLog(ctx, request.(PostTelemetryInstanceLogRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTelemetryInstanceLog")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostTelemetryInstanceLogResponseObject); ok {
		if err := validResponse.VisitPostTelemetryInstanceLogResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
