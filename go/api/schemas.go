// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.1-0.20240505103949-a8119c1b09d4 DO NOT EDIT.
package api

// Defines values for ConfigKind.
const (
	Encrypted ConfigKind = "encrypted"
	Local     ConfigKind = "local"
	Remote    ConfigKind = "remote"
)

// Defines values for ConfigVersion.
const (
	ConfigDatabackIoV1 ConfigVersion = "config.databack.io/v1"
)

// Defines values for ConfigSpecLogging.
const (
	Debug ConfigSpecLogging = "debug"
	Error ConfigSpecLogging = "error"
	Info  ConfigSpecLogging = "info"
	Trace ConfigSpecLogging = "trace"
	Warn  ConfigSpecLogging = "warn"
)

// Defines values for EncryptedSpecAlgorithm.
const (
	Aes              EncryptedSpecAlgorithm = "aes"
	Chacha20Poly1305 EncryptedSpecAlgorithm = "chacha20poly1305"
)

// Defines values for TargetType.
const (
	TargetTypeFile TargetType = "file"
	TargetTypeS3   TargetType = "s3"
	TargetTypeSmb  TargetType = "smb"
)

// CommonRemoteDetails defines model for CommonRemoteDetails.
type CommonRemoteDetails struct {
	// Certificates Fingerprints of the remote certificate of the remote server, or one that signed it in the chain.
	// Starts with hash algorithm, e.g. sha256, followed by a : and the hex of the fingerprint.
	Certificates *[]string `json:"certificates,omitempty"`

	// Credentials Credentials to use to authenticate to the remote server.
	// Format is base64-encoded Curve25519 key
	Credentials *string `json:"credentials,omitempty"`

	// URL URL to the remote
	URL *string `json:"url,omitempty"`
}

// Config Base configuration for a databack instance, with details in the spec.
// Spec is determined by the kind.
type Config struct {
	Kind     ConfigKind             `json:"kind"`
	Metadata Metadata               `json:"metadata"`
	Spec     map[string]interface{} `json:"spec"`
	Version  ConfigVersion          `json:"version"`
}

// ConfigKind defines model for Config.Kind.
type ConfigKind string

// ConfigVersion defines model for Config.Version.
type ConfigVersion string

// ConfigSpec configuration details for a databack instance
type ConfigSpec struct {
	Database *Database `json:"database,omitempty"`
	Dump     *Dump     `json:"dump,omitempty"`

	// Logging logging level, one of debug, info, warn, error, fatal
	Logging *ConfigSpecLogging `json:"logging,omitempty"`
	Prune   *Prune             `json:"prune,omitempty"`
	Restore *Restore           `json:"restore,omitempty"`

	// Targets Configuration for individual targets that may be used for backup or restore.
	// To be referenced from within the Dump or Restore configuration.
	Targets   *map[string]Target `json:"targets,omitempty"`
	Telemetry *Telemetry         `json:"telemetry,omitempty"`
}

// ConfigSpecLogging logging level, one of debug, info, warn, error, fatal
type ConfigSpecLogging string

// DBCredentials defines model for DBCredentials.
type DBCredentials struct {
	// Password password for the database
	Password *string `json:"password,omitempty"`

	// Username username for the database
	Username *string `json:"username,omitempty"`
}

// Database defines model for Database.
type Database struct {
	Credentials *DBCredentials `json:"credentials,omitempty"`

	// Port port to connect to, defaults to 5432, overrides "server"
	Port *int `json:"port,omitempty"`

	// Server hostname:port to database
	Server *string `json:"server,omitempty"`
}

// Dump defines model for Dump.
type Dump struct {
	// Compact whether to compact the backup, defaults to false
	Compact *bool `json:"compact,omitempty"`

	// Compression compression algorithm to use, defaults to none
	Compression *string `json:"compression,omitempty"`

	// Exclude list of database names to exclude from backup, defaults to none
	Exclude *[]string `json:"exclude,omitempty"`

	// FilenamePattern pattern for the filename
	FilenamePattern *string `json:"filenamePattern,omitempty"`

	// Include list of database names to backup, defaults to all
	Include *[]string `json:"include,omitempty"`

	// MaxAllowedPacket maximum packet size to username
	MaxAllowedPacket *int `json:"maxAllowedPacket,omitempty"`

	// NoDatabaseName do not include database name in backup, assumes will run restore already selected to specific database
	NoDatabaseName *bool `json:"noDatabaseName,omitempty"`

	// Safechars whether to use safe characters in the backup name, defaults to false
	Safechars *bool     `json:"safechars,omitempty"`
	Schedule  *Schedule `json:"schedule,omitempty"`
	Scripts   *Scripts  `json:"scripts,omitempty"`

	// Targets list of targets to send the backup, must reference one of the named targets in the config
	Targets *[]string `json:"targets,omitempty"`
}

// EncryptedSpec Spec that is encrypted, using the provided algorithm. The symmetric key is encrypted with the public key of the instance.
type EncryptedSpec struct {
	// Algorithm algorithm used to encrypt the data, lower-case
	Algorithm *EncryptedSpecAlgorithm `json:"algorithm,omitempty"`

	// Data encrypted data base64-encoded, when decrypted should be a valid Config
	Data *string `json:"data,omitempty"`

	// EncryptionKey symmetric key used to encrypt the data, encrypted with the public key of the recipient using nacl shared secret, base64-encoded
	EncryptionKey *string `json:"encryptionKey,omitempty"`

	// ReceipientPublicKey public key of the recipient, base64-encoded
	ReceipientPublicKey *string `json:"receipientPublicKey,omitempty"`

	// SenderPublicKey public key of the recipient, base64-encoded
	SenderPublicKey *string `json:"senderPublicKey,omitempty"`
}

// EncryptedSpecAlgorithm algorithm used to encrypt the data, lower-case
type EncryptedSpecAlgorithm string

// File defines model for File.
type File = map[string]interface{}

// InstanceBody defines model for InstanceBody.
type InstanceBody struct {
	ID *string `json:"id,omitempty"`
}

// Log defines model for Log.
type Log struct {
	// Fields key-value pairs for descriptive fields for the log message
	Fields *map[string]interface{} `json:"fields,omitempty"`

	// Level log level of the message, one of debug, info, warn, error, fatal
	Level *string `json:"level,omitempty"`

	// Message actual message
	Message *string `json:"message,omitempty"`

	// Run run ID as UUID
	Run *string `json:"run,omitempty"`

	// Timestamp timestamp for the date and time of a message, in RFC3339 format
	Timestamp *string `json:"timestamp,omitempty"`
}

// LogSummary defines model for LogSummary.
type LogSummary struct {
	// Completion completion code, using a subset of http codes
	Completion *int `json:"completion,omitempty"`

	// Date timestamp for start of backup run
	Date *int    `json:"date,omitempty"`
	ID   *string `json:"id,omitempty"`

	// Size size of logs in bytes
	Size *int `json:"size,omitempty"`
}

// Metadata defines model for Metadata.
type Metadata struct {
	// Description description of the config
	Description *string `json:"description,omitempty"`

	// Digest SHA256 digest of the config, optional
	Digest *string `json:"digest,omitempty"`

	// Name name of the config
	Name *string `json:"name,omitempty"`
}

// NewInstance information for a new licensed databacker instance
type NewInstance struct {
	// PublicKey ECDSA public key to associate with the instance, PEM-encoded
	PublicKey *string `json:"publicKey,omitempty"`
}

// Prune defines model for Prune.
type Prune struct {
	// Retention retention policies for backups
	Retention *string `json:"retention,omitempty"`
}

// RemoteSpec defines model for RemoteSpec.
type RemoteSpec = CommonRemoteDetails

// Restore defines model for Restore.
type Restore struct {
	// PostRestore directory where to find scripts to run after the restore
	PostRestore *string `json:"postRestore,omitempty"`

	// PreRestore directory where to find scripts to run before the restore
	PreRestore *string `json:"preRestore,omitempty"`
}

// S3 defines model for S3.
type S3 struct {
	// AccessKeyID access key ID
	AccessKeyID *string `json:"accessKeyID,omitempty"`

	// Endpoint endpoint URL
	Endpoint *string `json:"endpoint,omitempty"`

	// PathStyle whether to use path-style addressing instead of virtual-host-style, defaults to false
	PathStyle *bool `json:"pathStyle,omitempty"`

	// Region region of the bucket
	Region *string `json:"region,omitempty"`

	// SecretAccessKey secret access key
	SecretAccessKey *string `json:"secretAccessKey,omitempty"`
}

// SMB defines model for SMB.
type SMB struct {
	// Domain domain for the username
	Domain *string `json:"domain,omitempty"`

	// Password password for the target
	Password *string `json:"password,omitempty"`

	// Username username for the target
	Username *string `json:"username,omitempty"`
}

// Schedule defines model for Schedule.
type Schedule struct {
	// Begin when to start the schedule, in minutes from now, default is 0
	Begin *int `json:"begin,omitempty"`

	// Cron cron expression for the schedule
	Cron *string `json:"cron,omitempty"`

	// Frequency frequency in minutes
	Frequency *int `json:"frequency,omitempty"`

	// Once whether to run the schedule only once, default is false
	Once *bool `json:"once,omitempty"`
}

// Scripts defines model for Scripts.
type Scripts struct {
	// PostBackup directory where to find scripts to run after the backup
	PostBackup *string `json:"postBackup,omitempty"`

	// PreBackup directory where to find scripts to run before the backup
	PreBackup *string `json:"preBackup,omitempty"`
}

// Target individual backup target
type Target struct {
	Spec *map[string]interface{} `json:"spec,omitempty"`
	Type TargetType              `json:"type"`

	// URL url to send the backup to
	URL string `json:"url"`
}

// TargetType defines model for Target.Type.
type TargetType string

// Telemetry defines model for Telemetry.
type Telemetry struct {
	// BufferSize size of the buffer to use for telemetry, in bytes
	BufferSize *int `json:"bufferSize,omitempty"`

	// Certificates Fingerprints of the remote certificate of the remote server, or one that signed it in the chain.
	// Starts with hash algorithm, e.g. sha256, followed by a : and the hex of the fingerprint.
	Certificates *[]string `json:"certificates,omitempty"`

	// Credentials Credentials to use to authenticate to the remote server.
	// Format is base64-encoded Curve25519 key
	Credentials *string `json:"credentials,omitempty"`

	// URL URL to the remote
	URL *string `json:"url,omitempty"`
}
