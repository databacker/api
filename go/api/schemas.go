// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

// Defines values for S3Type.
const (
	S3TypeFile S3Type = "file"
	S3TypeS3   S3Type = "s3"
	S3TypeSmb  S3Type = "smb"
)

// Defines values for SMBType.
const (
	SMBTypeFile SMBType = "file"
	SMBTypeS3   SMBType = "s3"
	SMBTypeSmb  SMBType = "smb"
)

// Defines values for TargetType.
const (
	TargetTypeFile TargetType = "file"
	TargetTypeS3   TargetType = "s3"
	TargetTypeSmb  TargetType = "smb"
)

// BaseConfig defines model for BaseConfig.
type BaseConfig struct {
	Kind     string `json:"kind"`
	Metadata struct {
		// Certificate PEM-encoded certificate for the config, used only for verification of match
		Certificate *string `json:"Certificate,omitempty"`
		ID          *string `json:"ID,omitempty"`
	} `json:"metadata"`
	Spec    map[string]interface{} `json:"spec"`
	Version string                 `json:"version"`
}

// CommonRemoteDetails defines model for CommonRemoteDetails.
type CommonRemoteDetails struct {
	// URL URL to the remote
	URL          *string   `json:"URL,omitempty"`
	Certificates *[]string `json:"certificates,omitempty"`

	// Credentials base64-encoded Curve25519 key
	Credentials *string `json:"credentials,omitempty"`
}

// File individual backup target
type File = Target

// InstanceBody defines model for InstanceBody.
type InstanceBody struct {
	ID *string `json:"ID,omitempty"`
}

// LocalSpec defines model for LocalSpec.
type LocalSpec struct {
	Kind     string `json:"kind"`
	Metadata struct {
		// Certificate PEM-encoded certificate for the config, used only for verification of match
		Certificate *string `json:"Certificate,omitempty"`
		ID          *string `json:"ID,omitempty"`
	} `json:"metadata"`
	Spec struct {
		Database *struct {
			// Credentials credentials for a database
			Credentials *struct {
				// Password password for the database, encrypted
				Password *string `json:"password,omitempty"`

				// Token token for the database, encrypted
				Token *string `json:"token,omitempty"`

				// Username username for the database, encrypted
				Username *string `json:"username,omitempty"`
			} `json:"credentials,omitempty"`

			// Exclude list of database names to exclude from backup, defaults to none
			Exclude *[]string `json:"exclude,omitempty"`

			// Include list of database names to backup, defaults to all
			Include *[]string `json:"include,omitempty"`

			// Safechars whether to use safe characters in the backup name, defaults to false
			Safechars *bool `json:"safechars,omitempty"`

			// Url url to database, including type
			Url *string `json:"url,omitempty"`
		} `json:"Database,omitempty"`
		Schedule *struct {
			// Begin when to start the schedule, in minutes from now, default is 0
			Begin *float32 `json:"begin,omitempty"`

			// Cron cron expression for the schedule
			Cron *string `json:"cron,omitempty"`

			// Frequency frequency in minutes
			Frequency *float32 `json:"frequency,omitempty"`
		} `json:"Schedule,omitempty"`

		// Targets list of targets to send the backup
		Targets           *[]Target            `json:"Targets,omitempty"`
		TelemetryEndpoint *CommonRemoteDetails `json:"TelemetryEndpoint,omitempty"`
	} `json:"spec"`
	Version string `json:"version"`
}

// Log defines model for Log.
type Log struct {
	// Fields key-value pairs for descriptive fields for the log message
	Fields *map[string]interface{} `json:"Fields,omitempty"`

	// Level log level of the message, one of debug, info, warn, error, fatal
	Level *string `json:"Level,omitempty"`

	// Message actual message
	Message *string `json:"Message,omitempty"`

	// Run run ID as UUID
	Run *string `json:"Run,omitempty"`

	// Timestamp timestamp for the date and time of a message, in RFC3339 format
	Timestamp *string `json:"Timestamp,omitempty"`
}

// LogSummary defines model for LogSummary.
type LogSummary struct {
	// Completion completion code, using a subset of http codes
	Completion *int `json:"Completion,omitempty"`

	// Date timestamp for start of backup run
	Date *int    `json:"Date,omitempty"`
	ID   *string `json:"ID,omitempty"`

	// Size size of logs in bytes
	Size *int `json:"Size,omitempty"`
}

// NewInstance information for a new licensed databacker instance
type NewInstance struct {
	// PublicKey ECDSA public key to associate with the instance, PEM-encoded
	PublicKey *string `json:"PublicKey,omitempty"`
}

// RemoteSpec defines model for RemoteSpec.
type RemoteSpec struct {
	Kind     string `json:"kind"`
	Metadata struct {
		// Certificate PEM-encoded certificate for the config, used only for verification of match
		Certificate *string `json:"Certificate,omitempty"`
		ID          *string `json:"ID,omitempty"`
	} `json:"metadata"`
	Spec    CommonRemoteDetails `json:"spec"`
	Version string              `json:"version"`
}

// S3 defines model for S3.
type S3 struct {
	// Credentials credentials for an S3 object store target
	Credentials *struct {
		// AccessKeyID access key ID, encrypted
		AccessKeyID *string `json:"accessKeyID,omitempty"`

		// SecretAccessKey secret access key, encrypted
		SecretAccessKey *string `json:"secretAccessKey,omitempty"`
	} `json:"credentials,omitempty"`

	// Endpoint endpoint URL
	Endpoint *string `json:"endpoint,omitempty"`

	// Region region of the bucket
	Region *string `json:"region,omitempty"`
	Type   S3Type  `json:"type"`

	// Url url to send the backup to
	Url string `json:"url"`
}

// S3Type defines model for S3.Type.
type S3Type string

// SMB defines model for SMB.
type SMB struct {
	// Credentials credentials for an SMB target
	Credentials *struct {
		// Domain domain for the username, encrypted
		Domain *string `json:"domain,omitempty"`

		// Password password for the target, encrypted
		Password *string `json:"password,omitempty"`

		// Username username for the target, encrypted
		Username *string `json:"username,omitempty"`
	} `json:"credentials,omitempty"`
	Type SMBType `json:"type"`

	// Url url to send the backup to
	Url string `json:"url"`
}

// SMBType defines model for SMB.Type.
type SMBType string

// Target individual backup target
type Target struct {
	Type TargetType `json:"type"`

	// Url url to send the backup to
	Url string `json:"url"`
}

// TargetType defines model for Target.Type.
type TargetType string
