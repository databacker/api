openapi: "3.0.0"
info:
  title: Databack API
  description: API for communications and administration of databacker instances
  version: "1.0.0"
paths: {} # technically not needed under openapi3, but does not hurt, and aids backwards-compatibility
components:
  schemas:
    KeyInfo:
      type: string
      description: types of info to use for key derivation functions
      enum:
      - SymmetricKey
    Metadata:
      type: object
      properties:
        name:
          type: string
          description: name of the config
        description:
          type: string
          description: description of the config
        digest:
          type: string
          description: SHA256 digest of the config, optional

    CommonRemoteDetails:
      type: object
      properties:
        url:
          type: string
          description: URL to the remote
        credentials:
          type: string
          description: |
            Credentials to use to authenticate to the remote server.
            Format is base64-encoded Curve25519 key
          example: BwMqVfr1myxqX8tikIPYCyNtpHgMLIg/2nUE+pLQnTE=
        certificates:
          type: array
          description: |
            Fingerprints of the remote certificate of the remote server, or one that signed it in the chain.
            Starts with hash algorithm, e.g. sha256, followed by a : and the hex of the fingerprint.
          example: sha256:69729b8e15a86efc177a57afb7171dfc64add28c2fca8cf1507e34453ccb1470
          items:
            type: string
    NewInstance:
      type: object
      description: information for a new licensed databacker instance
      properties:
        publicKey:
          type: string
          description: ECDSA public key to associate with the instance, PEM-encoded
    InstanceBody:
      type: object
      properties:
        id:
          type: string
          example: 550e8400-e29b-41d4-a716-446655440000

    Config:
      type: object
      description: |
        Base configuration for a databack instance, with details in the spec.
        Spec is determined by the kind.
      required:
        - version
        - kind
        - metadata
        - spec
      properties:
        version:
          type: string
          enum:
          - config.databack.io/v1
        kind:
          type: string
          enum:
          - local
          - remote
          - encrypted
        metadata:
          $ref: '#/components/schemas/Metadata'
          
        spec:
          type: object
          discriminator:
            propertyName: kind
            mapping:
              local: '#/components/schemas/ConfigSpec'
              remote: '#/components/schemas/RemoteSpec'
              encrypted: '#/components/schemas/EncryptedSpec'
    ConfigSpec:
      type: object
      description: configuration details for a databack instance
      properties:
        database:
          $ref: "#/components/schemas/Database"
          description: configuration information for accessing database to backup
        dump:
          $ref: "#/components/schemas/Dump"
          description: schedule and details for backups
        targets:
          type: object
          description: |
            Configuration for individual targets that may be used for backup or restore.
            To be referenced from within the Dump or Restore configuration.
          additionalProperties:
            $ref: '#/components/schemas/Target'
        telemetry:
          $ref: '#/components/schemas/Telemetry'
        prune:
          $ref: '#/components/schemas/Prune'
        restore:
          $ref: '#/components/schemas/Restore'
        logging:
          type: string
          description: logging level, one of debug, info, warn, error, fatal          
          enum:
          - trace
          - debug
          - info
          - warn
          - error

    Prune:
      type: object
      properties:
        retention:
          type: string
          description: retention policies for backups

    Restore:
      type: object
      properties:
        preRestore:
          type: string
          description: directory where to find scripts to run before the restore
        postRestore:
          type: string
          description: directory where to find scripts to run after the restore

    Database:
      type: object
      properties:
        server: 
          type: string
          description: hostname:port to database
        port:
          type: integer
          description: port to connect to, defaults to 5432, overrides "server"
        credentials:
          $ref: "#/components/schemas/DBCredentials"

    DBCredentials:
      type: object
      properties:
        username:
          type: string
          description: username for the database
        password:
          type: string
          description: password for the database

    Dump:
      type: object
      properties:
        include:
          type: array
          description: list of database names to backup, defaults to all
          items:
            type: string
        exclude:
          type: array
          description: list of database names to exclude from backup, defaults to none
          items:
            type: string
        safechars:
          type: boolean
          description: whether to use safe characters in the backup name, defaults to false
        noDatabaseName:
          type: boolean
          description: do not include database name in backup, assumes will run restore already selected to specific database
        schedule:
          $ref: '#/components/schemas/Schedule'
        compression:
          type: string
          description: compression algorithm to use, defaults to none
        compact:
          type: boolean
          description: whether to compact the backup, defaults to false
        triggers:
          type: boolean
          description: whether to include triggers in the backup, defaults to false
        functions:
          type: boolean
          description: whether to include functions in the backup, defaults to false
        procedures:
          type: boolean
          description: whether to include procedures in the backup, defaults to false
        maxAllowedPacket:
          type: integer
          description: maximum packet size to username
        filenamePattern:
          type: string
          description: pattern for the filename
        encryption:
          $ref: '#/components/schemas/Encryption'
        targets:
          type: array
          description: list of targets to send the backup, must reference one of the named targets in the config
          items:
            type: string
        scripts:
          $ref: '#/components/schemas/Scripts'

    Schedule:
      type: object
      properties:
        cron:
          type: string
          description: cron expression for the schedule
        frequency:
          type: integer
          description: frequency in minutes
        begin:
          type: integer
          description: when to start the schedule, in minutes from now, default is 0
        once:
          type: boolean
          description: whether to run the schedule only once, default is false

    Scripts:
      type: object
      properties:
        preBackup:
          type: string
          description: directory where to find scripts to run before the backup
        postBackup:
          type: string
          description: directory where to find scripts to run after the backup
    
    Encryption:
      type: object
      properties:
        algorithm:
          type: string
          enum: [aes256-cbc,chacha20-poly1305,smime-aes256-cbc,pbkdf2-aes256-cbc,age-chacha20-poly1305]
          description: algorithm to use for encryption
        key:
          type: string
          description: encryption key or certificate, depending on algorithm, base64-encoded
        keyPath:
          type: string
          description: path to the encryption key or certificate, depending on algorithm
    
    RemoteSpec:
      description: details for retrieving configuration from a remote server
      allOf:
      - $ref: '#/components/schemas/CommonRemoteDetails'

    EncryptedSpec:
      type: object
      description: Spec that is encrypted, using the provided algorithm. The symmetric key is encrypted with the public key of the instance.
      properties:
        algorithm: 
          type: string
          description: algorithm used to encrypt the data, lower-case, with the key derived using NaCL key agreement
          enum: [aes256-gcm,chacha20-poly1305]
        recipientPublicKey:
          type: string
          description: public key of the recipient, base64-encoded
        senderPublicKey:
          type: string
          description: public key of the recipient, base64-encoded
        data:
          description: encrypted data base64-encoded, when decrypted should be a valid Config
          type: string

    Telemetry:
      allOf:
        - $ref: '#/components/schemas/CommonRemoteDetails'
        - properties:
            bufferSize:
              type: integer
              description: size of the buffer to use for telemetry, in bytes

    Log:
      type: object
      properties:
        run:
          type: string
          example: 550e8400-e29b-41d4-a716-446655440000
          description: run ID as UUID
        timestamp:
          type: string
          description: timestamp for the date and time of a message, in RFC3339 format
        level:
          type: string
          description: log level of the message, one of debug, info, warn, error, fatal
        fields:
          type: object
          additionalProperties: true
          description: key-value pairs for descriptive fields for the log message
        message:
          type: string
          description: actual message

    LogSummary:
      type: object
      properties:
        id:
          type: string
          example: 550e8400-e29b-41d4-a716-446655440000
        date:
          type: integer
          description: timestamp for start of backup run
        completion:
          type: integer
          description: completion code, using a subset of http codes
        size:
          type: integer
          description: size of logs in bytes

    Target:
      type: object
      description: individual backup target
      discriminator:
        propertyName: type
      properties:
        type:
          type: string
          enum: [s3,smb,file]
        url:
          type: string
          description: url to send the backup to
        spec:
          type: object
          discriminator:
            propertyName: kind
            mapping:
              s3: '#/components/schemas/S3'
              smb: '#/components/schemas/SMB'
              file: '#/components/schemas/File'
      required:
        - type
        - url
    S3:
      type: object
      properties:
        region:
          type: string
          description: region of the bucket
        endpoint:
          type: string
          description: endpoint URL
        pathStyle:
          type: boolean
          description: whether to use path-style addressing instead of virtual-host-style, defaults to false
        accessKeyID:
          type: string
          description: access key ID
        secretAccessKey:
          type: string
          description: secret access key
    SMB:
      type: object
      properties:
        domain:
          type: string
          description: domain for the username
        username:
          type: string
          description: username for the target
        password:
          type: string
          description: password for the target
    File:
      type: object
      properties: {}

  securitySchemes:
    # note that we could explicitly use the "type: oauth2" with flows, but that would
    # require stating the endpoints, which are an implementation detail, and would not
    # let us restrict it to JWT, as oauth does not declare the token format.
    # The endpoints and how the JWT bearer token is retrieved should be an implementation detail.
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
