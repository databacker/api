openapi: "3.0.0"
info:
  title: Databack API
  description: API for communications and administration of databacker instances
  version: "1.0.0"
paths: {} # technically not needed under openapi3, but does not hurt, and aids backwards-compatibility
components:
  schemas:
    CommonRemoteDetails:
      type: object
      properties:
        URL:
          type: string
          description: URL to the remote
        credentials:
          type: string
          description: base64-encoded Curve25519 key
        certificates:
          type: array
          items:
            type: string
            description: "Fingerprints of the remote certificate of the remote server, or one that signed it in the chain. Starts with hash algorithm, e.g. sha256, followed by a : and the hex of the fingerprint"
    NewInstance:
      type: object
      description: information for a new licensed databacker instance
      properties:
        PublicKey:
          type: string
          description: ECDSA public key to associate with the instance, PEM-encoded
    InstanceBody:
      type: object
      properties:
        ID:
          type: string
          example: 550e8400-e29b-41d4-a716-446655440000

    BaseConfig:
      type: object
      required:
        - version
        - kind
        - metadata
        - spec
      properties:
        version:
          type: string
        kind:
          type: string
        metadata:
          type: object
          properties:
            ID:
              type: string
              example: 550e8400-e29b-41d4-a716-446655440000
            Certificate:
              type: string
              description: PEM-encoded certificate for the config, used only for verification of match
          
        spec:
          type: object
          discriminator:
            propertyName: kind
            mapping:
              local: '#/components/schemas/LocalSpec'
              remote: '#/components/schemas/RemoteSpec'
    LocalSpec:
      allOf:
        - $ref: '#/components/schemas/BaseConfig'
        - type: object
          properties:
            spec:
              type: object
              properties:
                Database:
                  type: object
                  properties:
                    url: 
                      type: string
                      description: url to database, including type
                    credentials:
                      type: object
                      description: credentials for a database
                      properties:
                        username:
                          type: string
                          description: username for the database, encrypted
                        password:
                          type: string
                          description: password for the database, encrypted
                        token:
                          type: string
                          description: token for the database, encrypted
                    include:
                      type: array
                      description: list of database names to backup, defaults to all
                      items:
                        type: string
                    exclude:
                      type: array
                      description: list of database names to exclude from backup, defaults to none
                      items:
                        type: string
                    safechars:
                      type: boolean
                      description: whether to use safe characters in the backup name, defaults to false
                Targets:
                  type: array
                  description: list of targets to send the backup
                  items:
                    $ref: '#/components/schemas/Target'
                Schedule:
                  type: object
                  properties:
                    cron:
                      type: string
                      description: cron expression for the schedule
                    frequency:
                      type: number
                      description: frequency in minutes
                    begin:
                      type: number
                      description: when to start the schedule, in minutes from now, default is 0
                TelemetryEndpoint:
                  $ref: '#/components/schemas/CommonRemoteDetails'

    RemoteSpec:
      allOf:
        - $ref: '#/components/schemas/BaseConfig'
        - type: object
          properties:
            spec:
              $ref: '#/components/schemas/CommonRemoteDetails'

    Log:
      type: object
      properties:
        Run:
          type: string
          example: 550e8400-e29b-41d4-a716-446655440000
          description: run ID as UUID
        Timestamp:
          type: string
          description: timestamp for the date and time of a message, in RFC3339 format
        Level:
          type: string
          description: log level of the message, one of debug, info, warn, error, fatal
        Fields:
          type: object
          additionalProperties: true
          description: key-value pairs for descriptive fields for the log message
        Message:
          type: string
          description: actual message

    LogSummary:
      type: object
      properties:
        ID:
          type: string
          example: 550e8400-e29b-41d4-a716-446655440000
        Date:
          type: integer
          description: timestamp for start of backup run
        Completion:
          type: integer
          description: completion code, using a subset of http codes
        Size:
          type: integer
          description: size of logs in bytes     
    Target:
      type: object
      description: individual backup target
      discriminator:
        propertyName: type
      properties:
        type:
          type: string
          enum: [s3,smb,file]
        url:
          type: string
          description: url to send the backup to
      required:
        - type
        - url
    S3:
      allOf:
        - $ref: '#/components/schemas/Target'
        - type: object
          properties:
            region:
              type: string
              description: region of the bucket
            endpoint:
              type: string
              description: endpoint URL
            credentials:
              type: object
              description: credentials for an S3 object store target
              properties:
                accessKeyID:
                  type: string
                  description: access key ID, encrypted
                secretAccessKey:
                  type: string
                  description: secret access key, encrypted
    SMB:
      allOf:
        - $ref: '#/components/schemas/Target'
        - type: object
          properties:
            credentials:
              type: object
              description: credentials for an SMB target
              properties:
                domain:
                  type: string
                  description: domain for the username, encrypted
                username:
                  type: string
                  description: username for the target, encrypted
                password:
                  type: string
                  description: password for the target, encrypted
    File:
      allOf:
        - $ref: '#/components/schemas/Target'

  securitySchemes:
    # note that we could explicitly use the "type: oauth2" with flows, but that would
    # require stating the endpoints, which are an implementation detail, and would not
    # let us restrict it to JWT, as oauth does not declare the token format.
    # The endpoints and how the JWT bearer token is retrieved should be an implementation detail.
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
